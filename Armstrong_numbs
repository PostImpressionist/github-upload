package com.javarush.task.task20.task2025;

import java.util.*;

/* 
Алгоритмы-числа
*/

public class Solution {

    public static TreeSet<Long> resultList = new TreeSet<>();
//    public static long NN;
    public  static long[][] dergreeTab = new long[10][20];  // 1 - digits from 0 - 9, 2 - digits from 1 - 19
    static {
        for (int i = 1; i <= 9; i++) {
            dergreeTab[i][1] = i;
            for (int j = 2; j <= 19; j++) {
                dergreeTab[i][j] = dergreeTab[i][j - 1] * i;
            }
        } // end for
    } // end static
    public static void decrease( int startDecreaseRank, int[] ints, long N){
        long p = 0;
        while (ints[startDecreaseRank] > 0) {
            if(startDecreaseRank != 0)
                decrease(startDecreaseRank-1, ints, N);
            ints[startDecreaseRank]--;
//                print(ints);
            if ((p = equalOrNot(ints, ints.length)) != 0 && p < N)
                resultList.add(p);
            //tmp++;
            if(ints[startDecreaseRank] != 0 && startDecreaseRank != 0){
                for (int i = 0; i < startDecreaseRank; i++)     // начальные значения разрядам слева от intsStartRank
                    ints[i] = ints[startDecreaseRank];
//                    print(ints);
                if ((p = equalOrNot(ints, ints.length)) != 0 && p < N)
                    resultList.add(p);
                //    tmp++;
                decrease(startDecreaseRank-1, ints, N);
            }
        } // end while

    } // end decrease
 /*   public static void print(int[] ints){
        for (int i = 0; i < ints.length; i++)
            System.out.print(ints[i] + " ");
        System.out.println();
    } // end print
    public static void print(int[] ints, String s){
        for (int i = 0; i < ints.length; i++)
            System.out.print(ints[i] + " ");
        System.out.println(s);
    } // end print*/
    public static long equalOrNot (int[] ints, int len){
        //long resu = 0l;
        long result = 0l;
        //int length = ints.length;
        // result = intsToLong(ints);

        for (int i = 0; i < ints.length; i++)
            result = result + dergreeTab[ints[i]][len]; // управление степенью осуществить
//        int[] newInts = longToInts(result,length); // массив для сравнения с исходным
        /*if (Arrays.equals(ints, newInts) && degreeSum(result))
            return result;*/
           if (degreeSum(result))
            return result;

        return 0;
    } // returns 0 if not equal, else return long
    public static boolean degreeSum (long digit){
        if (digit <= 0) return false;
        long temp = 0, temp2 = digit;
        int length = String.valueOf(digit).length();
        for (int i = 0; i < length; i++) {
            temp = temp + dergreeTab[Math.toIntExact(digit % 10)][length];
            digit = digit/10;
        }
        return temp == temp2;
    }

    public static long[] getNumbers(long N) {

        if(N < 0) {
            //System.out.println("N is not natural number");
            return new long[0];
        }

        long y = 1;
//        NN = N;
        int l = String.valueOf(N).length();
        long[] res = null;

        int[] ints = new int[l];
        for (int i = 1; i <= 9; i++) {
            if(y < N) resultList.add(y);
            y++;
        } // добавляем от 1 до 9
        for (int i = 0; i < l-1 ; i++) {
            ints = new int[l - i];       // уменьшаем на один разряд исходной число
            Arrays.fill(ints, 9); // заполняем девятками
            decrease(ints.length - 1, ints, N);
        }

        res = new long[resultList.size()];
        l=0;
        for (long lon: resultList) {
            res[l++] = lon;
        }
        resultList.clear();
        return res;
    } // end getNumber

    public static void main(String[] args) {
        long a = System.currentTimeMillis();
        System.out.println(Arrays.toString(getNumbers(Long.MAX_VALUE)));    //2)));//10l)));////)));//Long.MAX_VALUE)));//
        long b = System.currentTimeMillis();
        System.out.println("memory " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (8 * 1024));
        System.out.println("time = " + (b - a) / 1000);


    } // end psvm
}

/*
Алгоритмы-числа
Число S состоит из M цифр, например, S=370 и M (количество цифр) = 3
Реализовать логику метода getNumbers, который должен среди натуральных чисел меньше N (long)
находить все числа, удовлетворяющие следующему критерию:
число S равно сумме его цифр, возведенных в M степень.
getNumbers должен возвращать все такие числа в порядке возрастания.

Пример искомого числа:
370 = 3*3*3 + 7*7*7 + 0*0*0
8208 = 8*8*8*8 + 2*2*2*2 + 0*0*0*0 + 8*8*8*8

На выполнение дается 10 секунд и 50 МБ памяти.
Метод main не участвует в тестировании.


Требования:
1. В классе Solution должен присутствовать метод public static long[] getNumbers(long N)
2. В методе getNumbers не должно возникать исключений, при любых входных данных.
3. Все найденные числа должны быть строго меньше N.
4. Метод getNumbers должен возвращать массив чисел удовлетворяющих условию задачи.
 */
